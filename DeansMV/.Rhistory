cor_values <- c(0, 0.2, 0.2, 0.2,0.2,0)  # Specify the correlations
simulated_data <- simulate_multivariate_data(n, means, cor_values)
neuro <- simulated_data[,1:2]
personality <- simulated_data[,3:4]
# CCA
my_cca_low <- max_cancor(neuro,personality)
adjusted_CCA_low <- adjust_CCA(neuro,personality,1000, my_cca_low)
adjusted_CCA_low
# MDMR
neural_dist <- dist(neuro, method = 'euclidean')
mdmr.res_low <- mdmr(X = personality, D = neural_dist)
summary(mdmr.res_low)
# RSA
RSA_low <- RSA(neuro,personality)
RSA_low
adj_RSA_low <- adjust_RSA(neuro,personality,100,RSA_low)
# Scenario 2: Moderate Correlation
cor_values <- c(0, 0.5, 0.5, 0.5,0.5,0)  # Specify the correlations
simulated_data1 <- simulate_multivariate_data(n, means, cor_values)
neuro1 <- simulated_data1[,1:2]
personality1 <- simulated_data1[,3:4]
# CCA
my_cca_mod<-  max_cancor(neuro1,personality1)
adjusted_CCA_mod <- adjust_CCA(neuro1,personality1,1000, my_cca_mod)
adjusted_CCA_mod
# MDMR
neural_dist <- dist(neuro1, method = 'euclidean')
mdmr.res_mod <- mdmr(X = personality1, D = neural_dist)
summary(mdmr.res_mod)
# RSA
RSA_mod <- RSA(neuro1,personality1)
RSA_mod
adj_RSA_mod <- adjust_RSA(neuro1,personality1,100,RSA_mod)
adj_RSA_mod
# Scenario 3: High Correlation
n <- 2000
means <- c(0, 0, 0, 0)
cor_values <- c(0, 0.8, 0.8, 0.8,0.8,0)  # Specify the correlations
simulated_data3 <- simulate_multivariate_data(n, means, cor_values)
neuro3 <- simulated_data3[,1:2]
personality3 <- simulated_data3[,3:4]
# CCA
my_cca_high<-  max_cancor(neuro3,personality3)
adjusted_CCA_high <- adjust_CCA(neuro3,personality3,1000, my_cca_high)
adjusted_CCA_high
# MDMR
neural_dist <- dist(neuro3, method = 'euclidean')
mdmr.res_mod <- mdmr(X = personality3, D = neural_dist)
summary(mdmr.res_mod)
# RSA
RSA_high <- RSA(neuro3,personality3)
RSA_high
adj_RSA_high <- adjust_RSA(neuro3,personality3,100,RSA_high)
adj_RSA_high
# Scenario 4: No Correlation
n <- 2000
means <- c(0, 0, 0, 0)
cor_values <- 0  # Specify the correlations
simulated_data2 <- simulate_multivariate_data(n, means,cor_values)
cor(simulated_data2)
neuro2 <- simulated_data2[,1:2]
personality2 <- simulated_data2[,3:4]
# CCA
my_cca_zero<-  max_cancor(neuro2,personality2)
adjusted_CCA_zero <- adjust_CCA(neuro2,personality2,1000, my_cca_zero)
adjusted_CCA_zero
# MDMR
neural_dist <- dist(neuro2, method = 'euclidean')
mdmr.res_mod <- mdmr(X = personality2, D = neural_dist)
summary(mdmr.res_mod)
# RSA
RSA_zero <- RSA(neuro2,personality2)
RSA_zero
adj_RSA_zero <- adjust_RSA(neuro2,personality2,100,RSA_zero)
adj_RSA_zero
```
# 10 variables - homogenous
# Constant parameters
n <- 2000
means <- c(rep(0,10))
vars <- c(rep(1,10))
# Scenario 1 : Weak correlation: 0.2
cor_values <- c(rep(0,4),rep(0.2,5),rep(0,3), rep(0.2,5),rep(0,2), rep(0.2,5)
,rep(0,1), rep(0.2,10),rep(0,10))
simulated_data <- simulate_multivariate_data(n, means, cor_values)
neuro <- simulated_data[,1:5]
personality <- simulated_data[,6:10]
# CCA
my_cca_low <- max_cancor(neuro,personality)
adjusted_CCA_low <- adjust_CCA(neuro,personality,1000, my_cca_low)
adjusted_CCA_low
# MDMR
neural_dist <- dist(neuro, method = 'euclidean')
mdmr.res_low <- mdmr(X = personality, D = neural_dist)
summary(mdmr.res_low)
# RSA
RSA_low <- RSA(neuro,personality)
RSA_low
adj_RSA_low <- adjust_RSA(neuro,personality,100,RSA_low)
# Scenario 2: Moderate Correlation
n <- 2000
means <- c(rep(0,10))
vars <- c(rep(1,10))
cor_values <- c(rep(0,4),rep(0.5,5),rep(0,3), rep(0.5,5),rep(0,2), rep(0.5,5)
,rep(0,1), rep(0.5,10),rep(0,10))
simulated_data1 <- simulate_multivariate_data(n, means, cor_values)
neuro1 <- simulated_data1[,1:5]
personality1 <- simulated_data1[,6:10]
# CCA
my_cca_mod<-  max_cancor(neuro1,personality1)
adjusted_CCA_mod <- adjust_CCA(neuro1,personality1,1000, my_cca_mod)
adjusted_CCA_mod
# MDMR
neural_dist <- dist(neuro1, method = 'euclidean')
mdmr.res_mod <- mdmr(X = personality1, D = neural_dist)
summary(mdmr.res_mod)
# RSA
RSA_mod <- RSA(neuro1,personality1)
RSA_mod
adj_RSA_mod <- adjust_RSA(neuro1,personality1,100,RSA_mod)
adj_RSA_mod
# Scenario 3: High Correlation
n <- 2000
means <- c(rep(0,10))
vars <- c(rep(1,10))
# Specify the correlations
cor_values <- c(rep(0,4),rep(0.8,5),rep(0,3), rep(0.8,5),rep(0,2), rep(0.8,5)
,rep(0,1), rep(0.8,10),rep(0,10))
simulated_data2 <- simulate_multivariate_data(n, means, cor_values)
neuro2 <- simulated_data2[,1:5]
personality2 <- simulated_data2[,6:10]
# CCA
my_cca_high<-  max_cancor(neuro2,personality2)
adjusted_CCA_high <- adjust_CCA(neuro2,personality2,1000, my_cca_high)
adjusted_CCA_high
# MDMR
neural_dist <- dist(neuro2, method = 'euclidean')
mdmr.res_mod <- mdmr(X = personality2, D = neural_dist)
summary(mdmr.res_mod)
# RSA
RSA_high <- RSA(neuro2,personality2)
RSA_high
adj_RSA_high <- adjust_RSA(neuro2,personality2,100,RSA_high)
adj_RSA_high
# Sample Size = 50
n <- 50
# Constant parameters
means <- c(rep(0,10))
vars <- c(rep(1,10))
cor_values <- c(rep(0,4),rep(0.2,5),rep(0,3), rep(0.2,5),rep(0,2), rep(0.2,5)
,rep(0,1), rep(0.2,10),rep(0,10))
# Create data
simulated_data1 <- simulate_multivariate_data(n, means, cor_values)
cor(simulated_data1)
neuro1 <- simulated_data1[,1:5]
personality1 <- simulated_data1[,6:10]
# CCA
my_cca_50<-  max_cancor(neuro1,personality1)
adjusted_CCA_50 <- adjust_CCA(neuro1,personality1,1000, my_cca_50)
adjusted_CCA_50
# MDMR
neural_dist <- dist(neuro1, method = 'euclidean')
mdmr.res_mod <- mdmr(X = personality1, D = neural_dist)
summary(mdmr.res_mod)
# RSA
RSA_50 <- RSA(neuro1,personality1)
RSA_50
adj_RSA_50 <- adjust_RSA(neuro1,personality1,100,RSA_50)
adj_RSA_50
# Sample Size = 100
n <- 100
# Constant parameters
means <- c(rep(0,10))
vars <- c(rep(1,10))
cor_values <- c(rep(0,4),rep(0.2,5),rep(0,3), rep(0.2,5),rep(0,2), rep(0.2,5)
,rep(0,1), rep(0.2,10),rep(0,10))
# Create data
simulated_data1 <- simulate_multivariate_data(n, means, cor_values)
cor(simulated_data1)
neuro1 <- simulated_data1[,1:5]
personality1 <- simulated_data1[,6:10]
# CCA
my_cca_100<-  max_cancor(neuro1,personality1)
adjusted_CCA_100 <- adjust_CCA(neuro1,personality1,1000, my_cca_100)
adjusted_CCA_100
# MDMR
neural_dist <- dist(neuro1, method = 'euclidean')
mdmr.res_mod <- mdmr(X = personality1, D = neural_dist)
summary(mdmr.res_mod)
# RSA
RSA_100 <- RSA(neuro1,personality1)
RSA_100
adj_RSA_100 <- adjust_RSA(neuro1,personality1,100,RSA_100)
adj_RSA_100
# Sample Size = 150
n <- 150
# Constant parameters
means <- c(rep(0,10))
vars <- c(rep(1,10))
cor_values <- c(rep(0,4),rep(0.2,5),rep(0,3), rep(0.2,5),rep(0,2), rep(0.2,5)
,rep(0,1), rep(0.2,10),rep(0,10))
# Create data
simulated_data1 <- simulate_multivariate_data(n, means, cor_values)
neuro1 <- simulated_data1[,1:5]
personality1 <- simulated_data1[,6:10]
# CCA
my_cca_150<-  max_cancor(neuro1,personality1)
adjusted_CCA_150 <- adjust_CCA(neuro1,personality1,1000, my_cca_150)
adjusted_CCA_150
# MDMR
neural_dist <- dist(neuro1, method = 'euclidean')
mdmr.res_mod <- mdmr(X = personality1, D = neural_dist)
summary(mdmr.res_mod)
# RSA
RSA_150 <- RSA(neuro1,personality1)
RSA_150
adj_RSA_150 <- adjust_RSA(neuro1,personality1,100,RSA_150)
adj_RSA_150
# Sample Size = 200
n <- 200
# Constant parameters
means <- c(rep(0,10))
vars <- c(rep(1,10))
cor_values <- c(rep(0,4),rep(0.2,5),rep(0,3), rep(0.2,5),rep(0,2), rep(0.2,5)
,rep(0,1), rep(0.2,10),rep(0,10))
# Create data
simulated_data1 <- simulate_multivariate_data(n, means, cor_values)
neuro1 <- simulated_data1[,1:5]
personality1 <- simulated_data1[,6:10]
# CCA
my_cca_200<-  max_cancor(neuro1,personality1)
adjusted_CCA_200 <- adjust_CCA(neuro1,personality1,1000, my_cca_200)
adjusted_CCA_200
# MDMR
neural_dist <- dist(neuro1, method = 'euclidean')
mdmr.res_mod <- mdmr(X = personality1, D = neural_dist)
summary(mdmr.res_mod)
# RSA
RSA_200 <- RSA(neuro1,personality1)
RSA_200
adj_RSA_200 <- adjust_RSA(neuro1,personality1,100,RSA_200)
adj_RSA_200
# Sample Size = 250
n <- 250
# Constant parameters
means <- c(rep(0,10))
vars <- c(rep(1,10))
cor_values <- c(rep(0,4),rep(0.2,5),rep(0,3), rep(0.2,5),rep(0,2), rep(0.2,5)
,rep(0,1), rep(0.2,10),rep(0,10))
# Create data
simulated_data1 <- simulate_multivariate_data(n, means, cor_values)
cor(simulated_data1)
neuro1 <- simulated_data1[,1:5]
personality1 <- simulated_data1[,6:10]
# CCA
my_cca_250<-  max_cancor(neuro1,personality1)
adjusted_CCA_250 <- adjust_CCA(neuro1,personality1,1000, my_cca_250)
adjusted_CCA_250
# MDMR
neural_dist <- dist(neuro1, method = 'euclidean')
mdmr.res_mod <- mdmr(X = personality1, D = neural_dist)
summary(mdmr.res_mod)
# RSA
RSA_250 <- RSA(neuro1,personality1)
RSA_250
adj_RSA_250 <- adjust_RSA(neuro1,personality1,100,RSA_250)
adj_RSA_250
# Sample Size = 350
n <- 350
# Constant parameters
means <- c(rep(0,10))
vars <- c(rep(1,10))
cor_values <- c(rep(0,4),rep(0.2,5),rep(0,3), rep(0.2,5),rep(0,2), rep(0.2,5)
,rep(0,1), rep(0.2,10),rep(0,10))
# Create data
simulated_data1 <- simulate_multivariate_data(n, means, cor_values)
neuro1 <- simulated_data1[,1:5]
personality1 <- simulated_data1[,6:10]
# CCA
my_cca_350<-  max_cancor(neuro1,personality1)
adjusted_CCA_350 <- adjust_CCA(neuro1,personality1,1000, my_cca_350)
adjusted_CCA_350
# MDMR
neural_dist <- dist(neuro1, method = 'euclidean')
mdmr.res_mod <- mdmr(X = personality1, D = neural_dist)
summary(mdmr.res_mod)
# RSA
RSA_350 <- RSA(neuro1,personality1)
RSA_350
adj_RSA_350 <- adjust_RSA(neuro1,personality1,100,RSA_350)
adj_RSA_350
# Sample Size = 450
n <- 450
# Constant parameters
means <- c(rep(0,10))
vars <- c(rep(1,10))
cor_values <- c(rep(0,4),rep(0.2,5),rep(0,3), rep(0.2,5),rep(0,2), rep(0.2,5)
,rep(0,1), rep(0.2,10),rep(0,10))
# Create data
simulated_data1 <- simulate_multivariate_data(n, means, cor_values)
neuro1 <- simulated_data1[,1:5]
personality1 <- simulated_data1[,6:10]
# CCA
my_cca_450<-  max_cancor(neuro1,personality1)
adjusted_CCA_450 <- adjust_CCA(neuro1,personality1,1000, my_cca_450)
adjusted_CCA_450
# MDMR
neural_dist <- dist(neuro1, method = 'euclidean')
mdmr.res_mod <- mdmr(X = personality1, D = neural_dist)
summary(mdmr.res_mod)
# RSA
RSA_450 <- RSA(neuro1,personality1)
RSA_450
adj_RSA_450 <- adjust_RSA(neuro1,personality1,100,RSA_450)
adj_RSA_450
# Sample Size = 650
n <- 650
# Constant parameters
means <- c(rep(0,10))
vars <- c(rep(1,10))
cor_values <- c(rep(0,4),rep(0.2,5),rep(0,3), rep(0.2,5),rep(0,2), rep(0.2,5)
,rep(0,1), rep(0.2,10),rep(0,10))
# Create data
simulated_data1 <- simulate_multivariate_data(n, means, cor_values)
neuro1 <- simulated_data1[,1:5]
personality1 <- simulated_data1[,6:10]
# CCA
my_cca_650<-  max_cancor(neuro1,personality1)
adjusted_CCA_650 <- adjust_CCA(neuro1,personality1,1000, my_cca_650)
adjusted_CCA_650
# MDMR
neural_dist <- dist(neuro1, method = 'euclidean')
mdmr.res_mod <- mdmr(X = personality1, D = neural_dist)
summary(mdmr.res_mod)
# RSA
RSA_650 <- RSA(neuro1,personality1)
RSA_650
adj_RSA_650 <- adjust_RSA(neuro1,personality1,100,RSA_650)
adj_RSA_650
# Sample Size = 850
n <- 850
# Constant parameters
means <- c(rep(0,10))
vars <- c(rep(1,10))
cor_values <- c(rep(0,4),rep(0.2,5),rep(0,3), rep(0.2,5),rep(0,2), rep(0.2,5)
,rep(0,1), rep(0.2,10),rep(0,10))
# Create data
simulated_data1 <- simulate_multivariate_data(n, means, cor_values)
neuro1 <- simulated_data1[,1:5]
personality1 <- simulated_data1[,6:10]
# CCA
my_cca_850<-  max_cancor(neuro1,personality1)
adjusted_CCA_850 <- adjust_CCA(neuro1,personality1,1000, my_cca_850)
adjusted_CCA_850
# MDMR
neural_dist <- dist(neuro1, method = 'euclidean')
mdmr.res_mod <- mdmr(X = personality1, D = neural_dist)
summary(mdmr.res_mod)
# RSA
RSA_850 <- RSA(neuro1,personality1)
RSA_850
adj_RSA_850 <- adjust_RSA(neuro1,personality1,100,RSA_850)
adj_RSA_850
```{r}
# Sample Size = 2000
n <- 2000
# Constant parameters
means <- c(rep(0,10))
vars <- c(rep(1,10))
cor_values <- c(rep(0,4),rep(0.2,5),rep(0,3), rep(0.2,5),rep(0,2), rep(0.2,5)
,rep(0,1), rep(0.2,10),rep(0,10))
# Create data
simulated_data1 <- simulate_multivariate_data(n, means, cor_values)
neuro1 <- simulated_data1[,1:5]
personality1 <- simulated_data1[,6:10]
# CCA
my_cca_2000<-  max_cancor(neuro1,personality1)
adjusted_CCA_2000 <- adjust_CCA(neuro1,personality1,1000, my_cca_2000)
adjusted_CCA_2000
# MDMR
neural_dist <- dist(neuro1, method = 'euclidean')
mdmr.res_mod <- mdmr(X = personality1, D = neural_dist)
summary(mdmr.res_mod)
# RSA
RSA_2000 <- RSA(neuro1,personality1)
RSA_2000
adj_RSA_2000 <- adjust_RSA(neuro1,personality1,100,RSA_2000)
adj_RSA_2000
# Overview over unadjusted R2
raw_cca <- as.data.frame(rbind(my_cca_50, my_cca_100, my_cca_150, my_cca_200
, my_cca_250, my_cca_350, my_cca_450, my_cca_650
, my_cca_850, my_cca_2000))
raw_cca
# Overview over adjusted R2
adjusted_cca <- as.data.frame(rbind(adjusted_CCA_50, adjusted_CCA_100,
adjusted_CCA_150,
adjusted_CCA_200, adjusted_CCA_250,
adjusted_CCA_350, adjusted_CCA_450,
adjusted_CCA_650, adjusted_CCA_850,
adjusted_CCA_2000))
adjusted_cca
# Overview over RSA
raw_RSA_correl <- as.data.frame(rbind(RSA_50, RSA_100,RSA_150, RSA_200,RSA_250,
RSA_350, RSA_450,RSA_650,RSA_850,RSA_2000))
raw_RSA_correl
adj_RSA_correl <- as.data.frame(rbind(adj_RSA_50, adj_RSA_100,
adj_RSA_150, adj_RSA_200,
adj_RSA_250, adj_RSA_350,
adj_RSA_450,adj_RSA_650,adj_RSA_850,
adj_RSA_2000))
adj_RSA_correl
# 20 variables - Homogenous
n <- 3000
means <- c(rep(0,20))
vars <- c(rep(1,20))
# Scenario 1 : Weak correlation: 0.2
cor_values <- c(rep(0,9),rep(0.2,10),rep(0,8), rep(0.2,10),rep(0,7), rep(0.2,10)
,rep(0,6), rep(0.2,10),rep(0,5), rep(0.2,10), rep(0,4), rep(0.2,10),
rep(0,3), rep(0.2,10), rep(0,2), rep(0.2,10), rep(0,1), rep(0.2,10),
rep(0,0), rep(0.2,10),
rep(0,45))
simulated_data <- simulate_multivariate_data(n, means, cor_values)
neuro <- simulated_data[,1:10]
personality <- simulated_data[,11:20]
# CCA
my_cca_low <- max_cancor(neuro,personality)
adjusted_CCA_low <- adjust_CCA(neuro,personality,1000, my_cca_low)
adjusted_CCA_low
# MDMR
neural_dist <- dist(neuro, method = 'euclidean')
mdmr.res_low <- mdmr(X = personality, D = neural_dist)
summary(mdmr.res_low)
# RSA
RSA_low <- RSA(neuro,personality)
RSA_low
adj_RSA_low <- adjust_RSA(neuro,personality,100,RSA_low)
# Scenario 2: Moderate Correlation
cor_values <- c(rep(0,9),rep(0.5,10),rep(0,8), rep(0.5,10),rep(0,7), rep(0.5,10)
,rep(0,6), rep(0.5,10),rep(0,5), rep(0.5,10), rep(0,4), rep(0.5,10),
rep(0,3), rep(0.5,10), rep(0,2), rep(0.5,10), rep(0,1), rep(0.5,10),
rep(0,0), rep(0.5,10),
rep(0,45))
simulated_data1 <- simulate_multivariate_data(n, means, cor_values)
neuro1 <- simulated_data1[,1:10]
personality1 <- simulated_data1[,11:20]
# CCA
my_cca_mod<-  max_cancor(neuro1,personality1)
adjusted_CCA_mod <- adjust_CCA(neuro1,personality1,1000, my_cca_mod)
adjusted_CCA_mod
# MDMR
neural_dist <- dist(neuro1, method = 'euclidean')
mdmr.res_mod <- mdmr(X = personality1, D = neural_dist)
summary(mdmr.res_mod)
# RSA
RSA_mod <- RSA(neuro1,personality1)
RSA_mod
adj_RSA_mod <- adjust_RSA(neuro1,personality1,100,RSA_mod)
adj_RSA_mod
summary(mdmr.res_low)
setwd("C:/Users/essoh/OneDrive/Desktop/DeansMV")
getwd()
setwd("C:/Users/essoh/OneDrive/Desktop/DeansMV")
setwd("C:/Users/essoh/OneDrive/Internship_Methods/DeansMV")
# set working directory to *inside* your R package
setwd("C:/Users/essoh/OneDrive/Internship_Methods/DeansMV")
library(devtools)
library(roxygen2)
library(usethis)
# set working directory to *inside* your R package
setwd("C:/Users/essoh/OneDrive/Internship_Methods/DeansMV")
means<- rep(0,4)
# Data simulation function
simulate_correlated_data <- function(n, means, vars, cor_values) {
set.seed(1)
p <- length(means)
# Construct correlation matrix
cor_matrix <- diag(p)
cor_matrix[lower.tri(cor_matrix)] <- cor_values
cor_matrix[upper.tri(cor_matrix)] <- t(cor_matrix)[upper.tri(cor_matrix)]
cor_matrix <- nearPD(cor_matrix)$mat  # Ensure positive definite
print(cor_matrix)
# Generate correlated data
simulated_data <- mvrnorm(n = n, mu = means, Sigma = cor_matrix)
return(simulated_data)
}
# Constant parameters
n <- 3000
means <- c(rep(0,20))
vars <- c(rep(1,20))
# Scenario 1 : Weak correlation: 0.2
cor_values <- c(rep(0,9),rep(0.2,10),rep(0,8), rep(0.2,10),rep(0,7), rep(0.2,10)
,rep(0,6), rep(0.2,10),rep(0,5), rep(0.2,10), rep(0,4), rep(0.2,10),
rep(0,3), rep(0.2,10), rep(0,2), rep(0.2,10), rep(0,1), rep(0.2,20),
rep(0,45))
simulated_data <- simulate_correlated_data(n, means, vars, cor_values)
library(Matrix)
library(MASS)
library(MDMR)
simulated_data <- simulate_correlated_data(n, means, vars, cor_values)
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
# 6. build your package
# creates an installable file with ending "tar.gz"
devtools::build()
library(DeansMV)
?RSA
?max_cancor
?simulate_multivariate_data
