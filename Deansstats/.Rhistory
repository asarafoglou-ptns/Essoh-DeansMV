personality1 <- simulated_data1[,11:20]
# CCA
my_cca_mod<-  max_cancor(neuro1,personality1)
adjusted_CCA_mod <- adjust_CCA(neuro1,personality1,1000, my_cca_mod)
adjusted_CCA_mod
# MDMR
neural_dist <- dist(neuro1, method = 'euclidean')
mdmr.res_mod <- mdmr(X = personality1, D = neural_dist)
summary(mdmr.res_mod)
# RSA
RSA_mod <- RSA(neuro1,personality1)
RSA_mod
adj_RSA_mod <- adjust_RSA(neuro1,personality1,100,RSA_mod)
adj_RSA_mod
summary(mdmr.res_low)
library(MASS)
library(Matrix)
simulate_multivariate_data <- function(n, means, diag_cor, within_cor, between_cor, column) {
set.seed(1)
p <- length(means)
# Construct correlation matrix
cor_matrix <- diag(p)
cor_matrix[lower.tri(cor_matrix)] <- within_cor
cor_matrix[upper.tri(cor_matrix)] <- t(cor_matrix)[upper.tri(cor_matrix)]
cor_matrix[1:column, (column + 1):p] <- between_cor
cor_matrix[(column + 1):p, 1:column] <- between_cor
cor_matrix <- nearPD(cor_matrix)$mat  # Ensure positive definite
# Generate correlated data
multivariate_data <- MASS::mvrnorm(n = n, mu = means, Sigma = cor_matrix, empirical = TRUE)
# Return the split data
return(multivariate_data)
}
# Constant parameters
n <- 3000
means <- rep(0, 20)
diag_cor  <- 1
within_cor <- 0
between_cor <- 0
column <- 10
# Call the function
my_data <- simulate_multivariate_data(n, means, diag_cor, within_cor, between_cor, column)
cor(my_data)
simulate_multivariate_data <- function(n, means, diag_cor, within_cor, between_cor, column) {
set.seed(1)
p <- length(means)
# Construct correlation matrix
cor_matrix <- diag(p)
cor_matrix[lower.tri(cor_matrix)] <- within_cor
cor_matrix[upper.tri(cor_matrix)] <- t(cor_matrix)[upper.tri(cor_matrix)]
cor_matrix[1:column, (column + 1):p] <- between_cor
cor_matrix[(column + 1):p, 1:column] <- between_cor
cor_matrix <- nearPD(cor_matrix)$mat  # Ensure positive definite
# Generate correlated data
multivariate_data <- MASS::mvrnorm(n = n, mu = means, Sigma = cor_matrix, empirical = TRUE)
# Return the split data
return(multivariate_data)
}
# Constant parameters
n <- 3000
means <- rep(0, 20)
diag_cor  <- 1
within_cor <- 0.1
between_cor <- 0.2
column <- 10
# Call the function
my_data <- simulate_multivariate_data(n, means, diag_cor, within_cor, between_cor, column)
cor(my_data)
simulate_multivariate_data <- function(n, means, diag_cor, within_cor, between_cor, column) {
set.seed(1)
p <- length(means)
# Construct correlation matrix
cor_matrix <- diag(p)
cor_matrix[lower.tri(cor_matrix)] <- within_cor
cor_matrix[upper.tri(cor_matrix)] <- t(cor_matrix)[upper.tri(cor_matrix)]
cor_matrix[1:column, (column + 1):p] <- between_cor
cor_matrix[(column + 1):p, 1:column] <- between_cor
cor_matrix <- nearPD(cor_matrix)$mat  # Ensure positive definite
# Generate correlated data
multivariate_data <- MASS::mvrnorm(n = n, mu = means, Sigma = cor_matrix, empirical = TRUE)
# Split the data
MV1 <- multivariate_data[, 1:column]
MV2 <- multivariate_data[, (column + 1):ncol(multivariate_data)]
# Return the split data
return(list(MV1 = MV1, MV2 = MV2))
}
# Constant parameters
n <- 3000
means <- rep(0, 20)
diag_cor  <- 1
within_cor <- 0  # Adjusted from 0.1 to 0.2
between_cor <- 0 # Adjusted from 0.2 to 0.5
column <- 10
# Call the function
my_data <- simulate_multivariate_data(n, means, diag_cor, within_cor, between_cor, column)
# Access the split data
MV1 <- my_data$MV1
MV2 <- my_data$MV2
library(MASS)
library(Matrix)
simulate_multivariate_data <- function(n, means, diag_cor, within_cor, between_cor, column) {
set.seed(1)
p <- length(means)
# Construct correlation matrix
cor_matrix <- diag(p)
cor_matrix[lower.tri(cor_matrix)] <- within_cor
cor_matrix[upper.tri(cor_matrix)] <- t(cor_matrix)[upper.tri(cor_matrix)]
cor_matrix[1:column, (column + 1):p] <- between_cor
cor_matrix[(column + 1):p, 1:column] <- between_cor
cor_matrix <- nearPD(cor_matrix)$mat  # Ensure positive definite
# Generate correlated data
multivariate_data <- MASS::mvrnorm(n = n, mu = means, Sigma = cor_matrix, empirical = TRUE)
# Split the data
MV1 <- multivariate_data[, 1:column]
MV2 <- multivariate_data[, (column + 1):ncol(multivariate_data)]
# Return the split data
return(list(MV1 = MV1, MV2 = MV2))
}
# Constant parameters
n <- 3000
means <- rep(0, 20)
diag_cor  <- 1
within_cor <- 0  # Adjusted from 0.1 to 0.2
between_cor <- 0 # Adjusted from 0.2 to 0.5
column <- 10
# Call the function
my_data <- simulate_multivariate_data(n, means, diag_cor, within_cor, between_cor, column)
# Access the split data
MV1 <- my_data$MV1
MV2 <- my_data$MV2
cor(MV1)
cor(MV2)
cor(MV1,MV2)
library(MASS)
library(Matrix)
simulate_multivariate_data <- function(n, means, diag_cor, within_cor, between_cor, column) {
set.seed(1)
p <- length(means)
# Construct correlation matrix
cor_matrix <- diag(p)
cor_matrix[lower.tri(cor_matrix)] <- within_cor
cor_matrix[upper.tri(cor_matrix)] <- t(cor_matrix)[upper.tri(cor_matrix)]
cor_matrix[1:column, (column + 1):p] <- between_cor
cor_matrix[(column + 1):p, 1:column] <- between_cor
cor_matrix <- nearPD(cor_matrix)$mat  # Ensure positive definite
# Generate correlated data
multivariate_data <- MASS::mvrnorm(n = n, mu = means, Sigma = cor_matrix, empirical = TRUE)
# Return the split data
return(multivariate_data)
}
# Constant parameters
n <- 3000
means <- rep(0, 20)
diag_cor  <- 1
within_cor <- 0.1
between_cor <- 0.2
column <- 7
# Call the function
my_data <- simulate_multivariate_data(n, means, diag_cor, within_cor, between_cor, column)
cor(my_data)
library(MASS)
library(Matrix)
simulate_multivariate_data <- function(n, means, diag_cor, within_cor, between_cor,column) {
set.seed(1)
p <- length(means)
# Construct correlation matrix
cor_matrix <- diag(p)
cor_matrix[lower.tri(cor_matrix)] <- within_cor
cor_matrix[upper.tri(cor_matrix)] <- t(cor_matrix)[upper.tri(cor_matrix)]
cor_matrix[1:column, (column + 1):p] <- between_cor
cor_matrix[(column + 1):p, 1:column] <- between_cor
cor_matrix <- nearPD(cor_matrix)$mat  # Ensure positive definite
# Generate correlated data
multivariate_data <- MASS::mvrnorm(n = n, mu = means, Sigma = cor_matrix, empirical = TRUE)
# Return the split data
return(multivariate_data)
}
# Constant parameters
n <- 3000
means <- rep(0, 20)
diag_cor  <- 1
within_cor <- 0.1
between_cor <- 0.2
column <- 7
# Call the function
my_data <- simulate_multivariate_data(n, means, diag_cor, within_cor, between_cor, column)
cor(my_data)
simulate_multivariate_data <- function(n, means, diag_cor, within_cor, between_cor,column) {
set.seed(1)
p <- length(means)
# Construct correlation matrix
cor_matrix <- diag(p)
cor_matrix[lower.tri(cor_matrix)] <- within_cor
cor_matrix[upper.tri(cor_matrix)] <- t(cor_matrix)[upper.tri(cor_matrix)]
cor_matrix[1:column, (column + 1):p] <- between_cor
cor_matrix[(column + 1):p, 1:column] <- between_cor
cor_matrix <- nearPD(cor_matrix)$mat  # Ensure positive definite
# Generate correlated data
multivariate_data <- MASS::mvrnorm(n = n, mu = means, Sigma = cor_matrix, empirical = TRUE)
# Split the data
MV1 <- multivariate_data[, 1:column]
MV2 <- multivariate_data[, (column + 1):ncol(multivariate_data)]
# Return the split data
return(list(MV1 = MV1, MV2 = MV2))
}
}
library(MASS)
library(Matrix)
simulate_multivariate_data <- function(n, means, diag_cor, within_cor, between_cor,column) {
set.seed(1)
p <- length(means)
# Construct correlation matrix
cor_matrix <- diag(p)
cor_matrix[lower.tri(cor_matrix)] <- within_cor
cor_matrix[upper.tri(cor_matrix)] <- t(cor_matrix)[upper.tri(cor_matrix)]
cor_matrix[1:column, (column + 1):p] <- between_cor
cor_matrix[(column + 1):p, 1:column] <- between_cor
cor_matrix <- nearPD(cor_matrix)$mat  # Ensure positive definite
# Generate correlated data
multivariate_data <- MASS::mvrnorm(n = n, mu = means, Sigma = cor_matrix, empirical = TRUE)
# Split the data
MV1 <- multivariate_data[, 1:column]
MV2 <- multivariate_data[, (column + 1):ncol(multivariate_data)]
# Return the split data
return(list(MV1 = MV1, MV2 = MV2))
}
# Constant parameters
n <- 3000
means <- rep(0, 20)
diag_cor  <- 1
within_cor <- 0.1
between_cor <- 0.2
column <- 7
# Call the function
my_data <- simulate_multivariate_data(n, means, diag_cor, within_cor, between_cor, column)
# Access the split data
MV1 <- my_data$MV1
MV2 <- my_data$MV2
cor(MV1)
cor(MV2)
library(MASS)
library(Matrix)
simulate_multivariate_data <- function(n, means, diag_cor, within_cor, between_cor,column) {
set.seed(1)
p <- length(means)
# Construct correlation matrix
cor_matrix <- diag(p)
cor_matrix[lower.tri(cor_matrix)] <- within_cor
cor_matrix[upper.tri(cor_matrix)] <- t(cor_matrix)[upper.tri(cor_matrix)]
cor_matrix[1:column, (column + 1):p] <- between_cor
cor_matrix[(column + 1):p, 1:column] <- between_cor
cor_matrix <- nearPD(cor_matrix)$mat  # Ensure positive definite
# Generate correlated data
multivariate_data <- MASS::mvrnorm(n = n, mu = means, Sigma = cor_matrix, empirical = TRUE)
# Split the data
MV1 <- multivariate_data[, 1:column]
MV2 <- multivariate_data[, (column + 1):ncol(multivariate_data)]
# Return the split data
return(list(MV1 = MV1, MV2 = MV2))
}
# Constant parameters
n <- 3000
means <- rep(0, 20)
diag_cor  <- 1
within_cor <- 0.1
between_cor <- 0.2
column <- 7
# Call the function
my_data <- simulate_multivariate_data(n, means, diag_cor, within_cor, between_cor, column)
# Access the split data
MV1 <- my_data$MV1
MV2 <- my_data$MV2
cor(MV1)
cor(MV2)
cor(MV1,MV2)
library(shiny)
library(Matrix)
library(bslib)
library(MASS)
library(DeansMV)
# Make sure to load your package here
# library(yourPackageName)
ui <- fluidPage(
titlePanel("Multivariate Data Analysis"),
sidebarLayout(
sidebarPanel(
tabsetPanel(
id = "tabs",
tabPanel("Data Simulation",
numericInput("n", "Sample Size", value = 100, min = 1),
textInput("means", "Means (comma separated)", value = "0,0,0,0"),
numericInput("diag_cor", "Diagonal Correlation", value = 1),
numericInput("within_cor", "Within Correlation", value = 0.1),
numericInput("between_cor", "Between Correlation", value = 0.2),
numericInput("column", "Column Split", value = 2, min = 1),
actionButton("simulate", "Simulate Data")
),
tabPanel("RSA Functions",
actionButton("rsa", "Run RSA"),
actionButton("null_dist_rsa", "Generate Null Distribution (RSA)"),
actionButton("adjust_rsa", "Adjust RSA"),
actionButton("perm_test_rsa", "Permutation Test (RSA)")
),
tabPanel("CCA Functions",
actionButton("max_cancor", "Max Canonical Correlation"),
actionButton("null_dist_cca", "Generate Null Distribution (CCA)"),
actionButton("adjust_cca", "Adjust CCA"),
actionButton("perm_test_cca", "Permutation Test (CCA)")
)
)
),
mainPanel(
verbatimTextOutput("output")
)
)
)
server <- function(input, output) {
values <- reactiveValues()
observeEvent(input$simulate, {
n <- input$n
means <- as.numeric(unlist(strsplit(input$means, ",")))
diag_cor <- input$diag_cor
within_cor <- input$within_cor
between_cor <- input$between_cor
column <- input$column
values$data <- simulate_multivariate_data(n, means, diag_cor, within_cor, between_cor, column)
output$output <- renderPrint({
list(MV1 = head(values$data$MV1), MV2 = head(values$data$MV2))
})
})
observeEvent(input$rsa, {
output$output <- renderPrint({
RSA(values$data$MV1, values$data$MV2)
})
})
observeEvent(input$null_dist_rsa, {
output$output <- renderPlot({
null.dist_RSA(values$data$MV1, values$data$MV2, num_permutations = 1000)
})
})
observeEvent(input$adjust_rsa, {
observed <- RSA(values$data$MV1, values$data$MV2)
output$output <- renderPrint({
adjust_RSA(values$data$MV1, values$data$MV2, num_permutations = 1000, observed = observed)
})
})
observeEvent(input$perm_test_rsa, {
observed <- RSA(values$data$MV1, values$data$MV2)
output$output <- renderPrint({
Perm_test_RSA(values$data$MV1, values$data$MV2, num_permutations = 1000, observed = observed)
})
})
observeEvent(input$max_cancor, {
output$output <- renderPrint({
max_cancor(values$data$MV1, values$data$MV2)
})
})
observeEvent(input$null_dist_cca, {
output$output <- renderPlot({
null_dist_CCA(values$data$MV1, values$data$MV2, num_permutations = 1000)
})
})
observeEvent(input$adjust_cca, {
raw_CCA <- max_cancor(values$data$MV1, values$data$MV2)
output$output <- renderPrint({
adjust_CCA(values$data$MV1, values$data$MV2, num_permutations = 1000, raw_CCA = raw_CCA)
})
})
observeEvent(input$perm_test_cca, {
observed <- max_cancor(values$data$MV1, values$data$MV2)
output$output <- renderPrint({
Perm_test_CCA(values$data$MV1, values$data$MV2, num_permutations = 1000, observed = observed)
})
})
}
shinyApp(ui, server)
library(shiny)
library(Matrix)
library(bslib)
library(MASS)
library(DeansMV)
# Make sure to load your package here
# library(yourPackageName)
ui <- fluidPage(
titlePanel("Multivariate Data Analysis"),
sidebarLayout(
sidebarPanel(
tabsetPanel(
id = "tabs",
tabPanel("Data Simulation",
numericInput("n", "Sample Size", value = 100, min = 1),
textInput("means", "Means (comma separated)", value = "0,0,0,0"),
numericInput("diag_cor", "Diagonal Correlation", value = 1),
numericInput("within_cor", "Within Correlation", value = 0.1),
numericInput("between_cor", "Between Correlation", value = 0.2),
numericInput("column", "Column Split", value = 2, min = 1),
actionButton("simulate", "Simulate Data")
),
tabPanel("RSA Functions",
actionButton("rsa", "Run RSA"),
actionButton("null_dist_rsa", "Generate Null Distribution (RSA)"),
actionButton("adjust_rsa", "Adjust RSA"),
actionButton("perm_test_rsa", "Permutation Test (RSA)")
),
tabPanel("CCA Functions",
actionButton("max_cancor", "Max Canonical Correlation"),
actionButton("null_dist_cca", "Generate Null Distribution (CCA)"),
actionButton("adjust_cca", "Adjust CCA"),
actionButton("perm_test_cca", "Permutation Test (CCA)")
)
)
),
mainPanel(
verbatimTextOutput("output")
)
)
)
server <- function(input, output) {
values <- reactiveValues()
observeEvent(input$simulate, {
n <- input$n
means <- as.numeric(unlist(strsplit(input$means, ",")))
diag_cor <- input$diag_cor
within_cor <- input$within_cor
between_cor <- input$between_cor
column <- input$column
values$data <- simulate_multivariate_data(n, means, diag_cor, within_cor, between_cor, column)
output$output <- renderPrint({
list(MV1 = head(values$data$MV1), MV2 = head(values$data$MV2))
})
})
observeEvent(input$rsa, {
output$output <- renderPrint({
RSA(values$data$MV1, values$data$MV2)
})
})
observeEvent(input$null_dist_rsa, {
output$output <- renderPlot({
null.dist_RSA(values$data$MV1, values$data$MV2, num_permutations = 1000)
})
})
observeEvent(input$adjust_rsa, {
observed <- RSA(values$data$MV1, values$data$MV2)
output$output <- renderPrint({
adjust_RSA(values$data$MV1, values$data$MV2, num_permutations = 1000, observed = observed)
})
})
observeEvent(input$perm_test_rsa, {
observed <- RSA(values$data$MV1, values$data$MV2)
output$output <- renderPrint({
Perm_test_RSA(values$data$MV1, values$data$MV2, num_permutations = 1000, observed = observed)
})
})
observeEvent(input$max_cancor, {
output$output <- renderPrint({
max_cancor(values$data$MV1, values$data$MV2)
})
})
observeEvent(input$null_dist_cca, {
output$output <- renderPlot({
null_dist_CCA(values$data$MV1, values$data$MV2, num_permutations = 1000)
})
})
observeEvent(input$adjust_cca, {
raw_CCA <- max_cancor(values$data$MV1, values$data$MV2)
output$output <- renderPrint({
adjust_CCA(values$data$MV1, values$data$MV2, num_permutations = 1000, raw_CCA = raw_CCA)
})
})
observeEvent(input$perm_test_cca, {
observed <- max_cancor(values$data$MV1, values$data$MV2)
output$output <- renderPrint({
Perm_test_CCA(values$data$MV1, values$data$MV2, num_permutations = 1000, observed = observed)
})
})
}
shinyApp(ui, server)
library(shiny)
library(Matrix)
library(bslib)
library(MASS)
library(DeansMV)
library(DeansMV)
# 6. build your package
# creates an installable file with ending "tar.gz"
devtools::build()
install.packages("C:/Users/essoh/OneDrive/Internship_Methods/DeansMV_1.2.tar.gz")
library(DeansMV)
?simulate_multivariate_data
library(DeansMV1)
library(DeansMV)
?simulate_multivariate_data
library(Deansstats)
?null_dist_CCA
setwd("C:/Users/essoh/OneDrive/Dokumente/RSA&CCA/Deansstats")
library(devtools)
library(roxygen2)
library(usethis)
library(bslib)
getwd()
devtools::document()
# 6. build your package
# creates an installable file with ending "tar.gz"
devtools::build()
devtools::install("C:/Users/essoh/OneDrive/Dokumente/RSA&CCA/Deansstats_1.2.tar.gz")
devtools::install("Deansstats")
devtools::install("Deansstats_1.2.tar.gz")
setwd("C:/Users/essoh/OneDrive/Dokumente/RSA&CCA")
devtools::install("Deansstats_1.2.tar.gz")
devtools::install("Deansstats")
library(Deansstats)
?null_dist_CCA
devtools::document()
