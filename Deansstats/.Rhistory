geom_point(size = 3) +
geom_line(aes(group = method), size = 1) +
labs(
title = "Effect Sizes vs Correlation Strength (Reversed Heterogeneity)",
x = "Correlation Strength",
y = "Effect Size",
color = "Method"
) +
theme_minimal()
# Combine the plots side by side
plot_exclusive + plot_reversed
CCA_rev_mod <- 0
CCA_rev_low  <- 0
# Data for mutually exclusive heterogeneity plot
data_exclusive <- data.frame(
correlation_strength = rep(c(0.15, 0.22), times = 3),
effect_size = c(CCA_excl_low, CCA_excl_mod, RSA_excl_low, RSA_excl_mod, 0.045, 0.09),
method = factor(rep(c("CCA", "RSA", "MDMR"), each = 2))
)
plot_exclusive <- ggplot(data_exclusive, aes(x = correlation_strength, y = effect_size, color = method)) +
geom_point(size = 3) +
geom_line(aes(group = method), size = 1) +
labs(
title = "Effect Sizes vs Correlation Strength (Exclusive Heterogeneity)",
x = "Correlation Strength",
y = "Effect Size",
color = "Method"
) +
theme_minimal()
# Data for reversed heterogeneity plot
data_reversed <- data.frame(
correlation_strength = rep(c(meancor_low, meancor_mod), times = 3),
effect_size = c(CCA_rev_low, CCA_rev_mod, RSA_rev_low, RSA_rev_mod, 0, 0),
method = factor(rep(c("CCA", "RSA", "MDMR"), each = 2))
)
plot_reversed <- ggplot(data_reversed, aes(x = correlation_strength, y = effect_size, color = method)) +
geom_point(size = 3) +
geom_line(aes(group = method), size = 1) +
labs(
title = "Effect Sizes vs Correlation Strength (Reversed Heterogeneity)",
x = "Correlation Strength",
y = "Effect Size",
color = "Method"
) +
theme_minimal()
# Combine the plots side by side
plot_exclusive + plot_reversed
# Data for mutually exclusive heterogeneity plot
data_exclusive <- data.frame(
correlation_strength = rep(c(0.15, 0.22), times = 3),
effect_size = c(CCA_excl_low, CCA_excl_mod, RSA_excl_low, RSA_excl_mod, 0.045, 0.09),
method = factor(rep(c("CCA", "RSA", "MDMR"), each = 2))
)
plot_exclusive <- ggplot(data_exclusive, aes(x = correlation_strength, y = effect_size, color = method)) +
geom_point(size = 3) +
geom_line(aes(group = method, linetype = method), size = 1, alpha = 0.7) +
labs(
title = "Effect Sizes vs Correlation Strength (Exclusive Heterogeneity)",
x = "Correlation Strength",
y = "Effect Size",
color = "Method",
linetype = "Method"
) +
theme_minimal()
# Data for reversed heterogeneity plot
data_reversed <- data.frame(
correlation_strength = rep(c(meancor_low, meancor_mod), times = 3),
effect_size = c(CCA_rev_low, CCA_rev_mod, RSA_rev_low, RSA_rev_mod, 0, 0),
method = factor(rep(c("CCA", "RSA", "MDMR"), each = 2))
)
plot_reversed <- ggplot(data_reversed, aes(x = correlation_strength, y = effect_size, color = method)) +
geom_point(size = 3) +
geom_line(aes(group = method, linetype = method), size = 1, alpha = 0.7) +
labs(
title = "Effect Sizes vs Correlation Strength (Reversed Heterogeneity)",
x = "Correlation Strength",
y = "Effect Size",
color = "Method",
linetype = "Method"
) +
theme_minimal()
# Combine the plots side by side
plot_exclusive + plot_reversed
# Data for mutually exclusive heterogeneity plot
data_exclusive <- data.frame(
correlation_strength = rep(c(0.15, 0.22), times = 3),
effect_size = c(CCA_excl_low, CCA_excl_mod, RSA_excl_low, RSA_excl_mod, 0.045, 0.09),
method = factor(rep(c("CCA", "RSA", "MDMR"), each = 2))
)
plot_exclusive <- ggplot(data_exclusive, aes(x = correlation_strength, y = effect_size, color = method)) +
geom_point(size = 3) +
geom_line(aes(group = method), size = 1, linetype = "dotted") +
labs(
title = "Effect Sizes vs Correlation Strength (Exclusive Heterogeneity)",
x = "Correlation Strength",
y = "Effect Size",
color = "Method"
) +
theme_minimal()
# Data for reversed heterogeneity plot
data_reversed <- data.frame(
correlation_strength = rep(c(meancor_low, meancor_mod), times = 3),
effect_size = c(CCA_rev_low, CCA_rev_mod, RSA_rev_low, RSA_rev_mod, 0, 0),
method = factor(rep(c("CCA", "RSA", "MDMR"), each = 2))
)
plot_reversed <- ggplot(data_reversed, aes(x = correlation_strength, y = effect_size, color = method)) +
geom_point(size = 3) +
geom_line(aes(group = method), size = 1, linetype = "dotted") +
labs(
title = "Effect Sizes vs Correlation Strength (Reversed Heterogeneity)",
x = "Correlation Strength",
y = "Effect Size",
color = "Method"
) +
theme_minimal()
# Combine the plots side by side
plot_exclusive + plot_reversed
# Data for mutually exclusive heterogeneity plot
data_exclusive <- data.frame(
correlation_strength = rep(c(0.15, 0.22), times = 3),
effect_size = c(CCA_excl_low, CCA_excl_mod, RSA_excl_low, RSA_excl_mod, 0.045, 0.09),
method = factor(rep(c("CCA", "RSA", "MDMR"), each = 2))
)
plot_exclusive <- ggplot(data_exclusive, aes(x = correlation_strength, y = effect_size, color = method)) +
geom_point(size = 3) +
geom_line(aes(group = method, linetype = method), size = 1, alpha = 0.7) +
labs(
title = "Effect Sizes vs Correlation Strength (Exclusive Heterogeneity)",
x = "Correlation Strength",
y = "Effect Size",
color = "Method",
linetype = "Method"
) +
theme_minimal()
# Data for reversed heterogeneity plot
data_reversed <- data.frame(
correlation_strength = rep(c(meancor_low, meancor_mod), times = 3),
effect_size = c(CCA_rev_low, CCA_rev_mod, RSA_rev_low, RSA_rev_mod, 0, 0),
method = factor(rep(c("CCA", "RSA", "MDMR"), each = 2))
)
plot_reversed <- ggplot(data_reversed, aes(x = correlation_strength, y = effect_size, color = method)) +
geom_point(size = 3) +
geom_line(aes(group = method, linetype = method), size = 1, alpha = 0.7) +
labs(
title = "Effect Sizes vs Correlation Strength (Reversed Heterogeneity)",
x = "Correlation Strength",
y = "Effect Size",
color = "Method",
linetype = "Method"
) +
theme_minimal()
# Combine the plots side by side
plot_exclusive + plot_reversed
means <- c(rep(0,16))
n=1000
cor_values <- c(rep(0,7), rep(0.3,4), rep(0,4),rep(0,6), rep(0.3,4), rep(0,4),
rep(0,5), rep(0.3,4), rep(0,4),rep(0,4), rep(0.3,4), rep(0,4),
rep(0,3), rep(0.3,4), rep(0,4),rep(0,2), rep(0.3,4), rep(0,4),
rep(0,1), rep(0.3,4), rep(0,4),rep(0,0), rep(0.3,4), rep(0,4),
rep(0,28))
x1 <- simulate_heterogeneous_data(n,means,cor_values)
cor(x1)
# 16 variables - mutually exclusive predictors
# Neuro correlated with first 4 personality variables
means <- c(rep(0,16))
n=1000
cor_values <- c(rep(0,7), rep(0.3,4), rep(0,4),rep(0,6), rep(0.3,4), rep(0,4),
rep(0,5), rep(0.3,4), rep(0,4),rep(0,4), rep(0.3,4), rep(0,4),
rep(0,3), rep(0.3,4), rep(0,4),rep(0,2), rep(0.3,4), rep(0,4),
rep(0,1), rep(0.3,4), rep(0,4),rep(0,0), rep(0.3,4), rep(0,4),
rep(0,28))
x1 <- simulate_heterogeneous_data(n,means,cor_values)
# Neuro correlated with last 4 personality variables
cor_values <- c(rep(0,7), rep(0,4), rep(0.3,4),rep(0,6), rep(0,4), rep(0.3,4),
rep(0,5), rep(0,4), rep(0.3,4),rep(0,4), rep(0,4), rep(0.3,4),
rep(0,3), rep(0,4), rep(0.3,4),rep(0,2), rep(0,4), rep(0.3,4),
rep(0,1), rep(0,4), rep(0.3,4),rep(0,0), rep(0,4), rep(0.3,4),
rep(0,28))
x2 <- simulate_heterogeneous_data(n,means,cor_values)
cor_1 <- 0.22
# Combine data
hetero_data <- as.data.frame(rbind(x1,x2))
hetero_neuro <- hetero_data[,1:8]
hetero_person <- hetero_data[,9:16]
# CCA
CCA_raw_1<- max_cancor(hetero_neuro, hetero_person)
CCA_raw_1
CCA_excl_mod <- adjust_CCA(hetero_neuro,hetero_person,100, CCA_raw_1)
CCA_excl_mod
#MDMR Euclid
neural_dist<- dist(hetero_neuro)
mdmr.res.euclid <- mdmr(X = hetero_person, D = neural_dist)
summary(mdmr.res.euclid)
#RSA
RSA_raw <- RSA(hetero_person, hetero_neuro)
RSA_raw
RSA_excl_mod <- adjust_RSA(hetero_neuro, hetero_person, 100, RSA_raw)
RSA_excl_mod
MDMR_excl_mod = 0.09
# 16 variables - mutually exclusive predictors
# Neuro correlated with first 4 personality variables
means <- c(rep(0,16))
n=1000
cor_values <- c(rep(0,7), rep(0.15,4), rep(0,4),rep(0,6), rep(0.15,4), rep(0,4),
rep(0,5), rep(0.15,4), rep(0,4),rep(0,4), rep(0.15,4), rep(0,4),
rep(0,3), rep(0.15,4), rep(0,4),rep(0,2), rep(0.15,4), rep(0,4),
rep(0,1), rep(0.15,4), rep(0,4),rep(0,0), rep(0.15,4), rep(0,4),
rep(0,28))
x1 <- simulate_heterogeneous_data(n,means,cor_values)
# Neuro correlated with last 4 personality variables
cor_values <- c(rep(0,7), rep(0,4), rep(0.15,4),rep(0,6), rep(0,4), rep(0.15,4),
rep(0,5), rep(0,4), rep(0.15,4),rep(0,4), rep(0,4), rep(0.15,4),
rep(0,3), rep(0,4), rep(0.15,4),rep(0,2), rep(0,4), rep(0.15,4),
rep(0,1), rep(0,4), rep(0.15,4),rep(0,0), rep(0,4), rep(0.15,4),
rep(0,28))
x2 <- simulate_heterogeneous_data(n,means,cor_values)
cor_2 <- 0.15
# Combine data
hetero_data <- as.data.frame(rbind(x1,x2))
hetero_neuro <- hetero_data[,1:8]
hetero_person <- hetero_data[,9:16]
# CCA
CCA_raw_1<- max_cancor(hetero_neuro, hetero_person)
CCA_raw_1
CCA_excl_low <- adjust_CCA(hetero_neuro,hetero_person,100, CCA_raw_1)
CCA_excl_low
#MDMR Euclid
neural_dist<- dist(hetero_neuro)
mdmr.res.euclid <- mdmr(X = hetero_person, D = neural_dist)
summary(mdmr.res.euclid)
#RSA
RSA_raw <- RSA(hetero_person, hetero_neuro)
RSA_raw
RSA_excl_low <- adjust_RSA(hetero_neuro, hetero_person, 100, RSA_raw)
RSA_excl_low
MDMR_excl_low = 0.045
# 16 variables - positive/negative
# Constant parameters
n <- 1000
means <- c(rep(0,16))
diag_cor <- 1
within_cor <- 0
column <- 8
# Subgroup 1: Moderate positive Correlation
between_cor <- 0.2
homo1<- simulate_multivariate_data(n, means, diag_cor, within_cor, between_cor, column)
#  Access the split data
neuro1 <- homo1$MV1
personality1 <- homo1$MV2
# Subgroup 2: Moderate negative correlation
between_cor <- -0.2
homo2 <- simulate_multivariate_data(n, means, diag_cor, within_cor, between_cor, column)
neuro2 <- homo2$MV1
personality2 <- homo2$MV2
meancor_low <- mean(abs(cor(neuro2,personality2)))
# Combine data
hetero_neuro <- as.data.frame(rbind(neuro1,neuro2))
hetero_person <- as.data.frame(rbind(personality1,personality2))
# CCA
CCA_raw_1<- max_cancor(hetero_neuro, hetero_person)
CCA_rev_low <- adjust_CCA(hetero_neuro,hetero_person,100, CCA_raw_1)
CCA_rev_low
CCA_rev_low  <- 0
#MDMR Euclid
neural_dist<- dist(hetero_neuro)
mdmr.res.euclid <- mdmr(X = hetero_person, D = neural_dist)
summary(mdmr.res.euclid)
MDMR_rev_low<-  0
#RSA
RSA_raw <- RSA(hetero_person, hetero_neuro)
RSA_raw
RSA_rev_low <- adjust_RSA(hetero_neuro, hetero_person, 100, RSA_raw)
RSA_rev_low
# 16 variables - positive/negative
# Constant parameters
n <- 1000
means <- c(rep(0,16))
diag_cor <- 1
within_cor <- 0
column <- 8
# Subgroup 1: Moderate positive Correlation
between_cor <- 0.5
homo1<- simulate_multivariate_data(n, means, diag_cor, within_cor, between_cor, column)
#  Access the split data
neuro1 <- homo1$MV1
personality1 <- homo1$MV2
# Subgroup 2: Moderate negative correlation
between_cor <- -0.5
homo2 <- simulate_multivariate_data(n, means, diag_cor, within_cor, between_cor, column)
neuro2 <- homo2$MV1
personality2 <- homo2$MV2
meancor_mod <- mean(abs(cor(neuro2,personality2)))
# Combine data
hetero_neuro <- as.data.frame(rbind(neuro1,neuro2))
hetero_person <- as.data.frame(rbind(personality1,personality2))
# CCA
CCA_raw_1<- max_cancor(hetero_neuro, hetero_person)
CCA_rev_mod <- adjust_CCA(hetero_neuro,hetero_person,100, CCA_raw_1)
CCA_rev_mod
CCA_rev_mod <- 0
#MDMR Euclid
neural_dist<- dist(hetero_neuro)
mdmr.res.euclid <- mdmr(X = hetero_person, D = neural_dist)
summary(mdmr.res.euclid)
MDMR_mod <- 0
#RSA
RSA_raw <- RSA(hetero_person, hetero_neuro)
RSA_raw
RSA_rev_mod <- adjust_RSA(hetero_neuro, hetero_person, 100, RSA_raw)
RSA_rev_mod
# Data for mutually exclusive heterogeneity plot
data_exclusive <- data.frame(
correlation_strength = rep(c(0.15, 0.22), times = 3),
effect_size = c(CCA_excl_low, CCA_excl_mod, RSA_excl_low, RSA_excl_mod, 0.045, 0.09),
method = factor(rep(c("CCA", "RSA", "MDMR"), each = 2))
)
plot_exclusive <- ggplot(data_exclusive, aes(x = correlation_strength, y = effect_size, color = method)) +
geom_point(size = 3) +
geom_line(aes(group = method, linetype = method), size = 1, alpha = 0.7) +
labs(
title = "Effect Sizes vs Correlation Strength (Exclusive Heterogeneity)",
x = "Correlation Strength",
y = "Effect Size",
color = "Method",
linetype = "Method"
) +
theme_minimal()
# Data for reversed heterogeneity plot
data_reversed <- data.frame(
correlation_strength = rep(c(meancor_low, meancor_mod), times = 3),
effect_size = c(CCA_rev_low, CCA_rev_mod, RSA_rev_low, RSA_rev_mod, 0, 0),
method = factor(rep(c("CCA", "RSA", "MDMR"), each = 2))
)
plot_reversed <- ggplot(data_reversed, aes(x = correlation_strength, y = effect_size, color = method)) +
geom_point(size = 3) +
geom_line(aes(group = method, linetype = method), size = 1, alpha = 0.7) +
labs(
title = "Effect Sizes vs Correlation Strength (Reversed Heterogeneity)",
x = "Correlation Strength",
y = "Effect Size",
color = "Method",
linetype = "Method"
) +
theme_minimal()
# Combine the plots side by side
plot_exclusive + plot_reversed
setwd("C:/Users/essoh/OneDrive/Desktop/Essoh-DeansMV/Deansstats")
# Load necessary libraries
library(Deansstats)
library(shiny)
library(MASS)
library(Matrix)
library(ggplot2)
# Define UI
ui <- fluidPage(
titlePanel("SimuFlex"),
sidebarLayout(
sidebarPanel(
tabsetPanel(
id = "tabs",
tabPanel("Data Simulation",
numericInput("n", "Sample Size", value = 100, min = 1),
textInput("means", "Means (comma separated)", value = "0,0,0,0"),
numericInput("diag_cor", "Diagonal Correlation", value = 1),
numericInput("within_cor", "Within Correlation", value = 0.1),
numericInput("between_cor", "Between Correlation", value = 0.2),
numericInput("column", "Number of Variables in MV1", value = 2, min = 1),
actionButton("simulate", "Simulate Data")
),
tabPanel("RSA Functions",
actionButton("rsa", "Compute Distance Matrix Correlation"),
numericInput("num_permutations_rsa", "Number of Permutations for RSA", value = 1000, min = 1),
actionButton("null.dist_RSA", "Generate Permuted Null Distribution"),
actionButton("adjust_rsa", "Adjust Distance Matrix Correlation"),
actionButton("perm_test_rsa", "Compute P-value")
),
tabPanel("CCA Functions",
actionButton("max_cancor", "Compute Highest Canonical Correlation"),
numericInput("num_permutations_cca", "Number of Permutations for CCA", value = 1000, min = 1),
actionButton("null_dist_cca", "Generate Permuted Null Distribution (CCA)"),
actionButton("adjust_cca", "Adjust Canonical Correlation"),
actionButton("perm_test_cca", "Compute P-value")
)
)
),
mainPanel(
tabsetPanel(
tabPanel("Exploring the app",
verbatimTextOutput("app_description")
),
tabPanel("Dataset",
verbatimTextOutput("output_simulate"),
plotOutput("plot_simulate")
),
tabPanel("RSA Results",
verbatimTextOutput("output_rsa"),
plotOutput("plot_rsa"),
verbatimTextOutput("output_adjust_rsa"),
verbatimTextOutput("output_perm_test_rsa")
),
tabPanel("CCA Results",
verbatimTextOutput("output_max_cancor"),
plotOutput("plot_cca"),
verbatimTextOutput("output_adjust_cca"),
verbatimTextOutput("output_perm_test_cca")
)
)
)
)
)
# Define Server
server <- function(input, output) {
values <- reactiveValues()
observeEvent(input$simulate, {
n <- input$n
means <- as.numeric(unlist(strsplit(input$means, ",")))
diag_cor <- input$diag_cor
within_cor <- input$within_cor
between_cor <- input$between_cor
column <- input$column
# Generate and round the multivariate data
simulated_data <- simulate_multivariate_data(n, means, diag_cor, within_cor, between_cor, column)
values$data <- simulated_data
# Round the data points before displaying
rounded_data <- lapply(simulated_data, function(x) {
round(x, 3)
})
output$output_simulate <- renderPrint({
list(MV1 = head(rounded_data$MV1), MV2 = head(rounded_data$MV2))
})
})
observeEvent(input$rsa, {
output$output_rsa <- renderPrint({
result <- round(RSA(values$data$MV1, values$data$MV2), 3)
paste("Distance Matrix Correlation:", result)
})
})
observeEvent(input$null.dist_RSA, {
num_permutations <- input$num_permutations_rsa
permuted_values <- null.dist_RSA(values$data$MV1, values$data$MV2, num_permutations)
output$plot_rsa <- renderPlot({
ggplot(data.frame(round(permuted_values, 3)), aes(x = round(permuted_values, 3))) +
geom_density(fill = "blue", alpha = 0.5) +
labs(title = "Null Distribution for RSA", x = "Permuted Distance Matrix Correlation", y = "Density")
})
})
observeEvent(input$adjust_rsa, {
observed <- round(RSA(values$data$MV1, values$data$MV2), 3)
output$output_adjust_rsa <- renderPrint({
result <- round(adjust_RSA(values$data$MV1, values$data$MV2, num_permutations = 1000, observed = observed), 3)
paste("Adjusted Distance Matrix Correlation:", result)
})
})
observeEvent(input$perm_test_rsa, {
observed <- round(adjust_RSA(values$data$MV1, values$data$MV2, num_permutations = 1000, observed = RSA(values$data$MV1, values$data$MV2)), 3)
output$output_perm_test_rsa <- renderPrint({
result <- round(Perm_test_RSA(values$data$MV1, values$data$MV2, num_permutations = 1000, observed = observed), 3)
paste("P-value for Adjusted Distance Matrix Correlation:", result)
})
})
observeEvent(input$max_cancor, {
output$output_max_cancor <- renderPrint({
result <- round(max_cancor(values$data$MV1, values$data$MV2), 3)
paste("Highest Canonical Correlation:", result)
})
})
observeEvent(input$null_dist_cca, {
num_permutations <- input$num_permutations_cca
permuted_values <- null_dist_CCA(values$data$MV1, values$data$MV2, num_permutations)
output$plot_cca <- renderPlot({
ggplot(data.frame(round(permuted_values, 3)), aes(x = round(permuted_values, 3))) +
geom_density(fill = "green", alpha = 0.5) +
labs(title = "Null Distribution for CCA", x = "Permuted CCA Values", y = "Density")
})
})
observeEvent(input$adjust_cca, {
raw_CCA <- round(max_cancor(values$data$MV1, values$data$MV2), 3)
output$output_adjust_cca <- renderPrint({
result <- round(adjust_CCA(values$data$MV1, values$data$MV2, num_permutations = 1000, raw_CCA = raw_CCA), 3)
paste("Adjusted Canonical Correlation:", result)
})
})
observeEvent(input$perm_test_cca, {
observed <- round(adjust_CCA(values$data$MV1, values$data$MV2, num_permutations = 1000, raw_CCA = max_cancor(values$data$MV1, values$data$MV2)), 3)
output$output_perm_test_cca <- renderPrint({
result <- round(Perm_test_CCA(values$data$MV1, values$data$MV2, num_permutations = 1000, observed = observed), 3)
paste("P-value for Adjusted Canonical Correlation:", result)
})
})
output$app_description <- renderPrint({
"Welcome to Simuflex! This app was designed for students and researchers
interested in multivariate data simulation and analysis. With Simuflex,
you can simulate multivariate data and analyze it using representational
similarity analysis (RSA) and canonical correlation analysis (CCA). Both RSA
and CCA do not have a null distribution. Simuflex addresses this problem for
you! You can generate a permuted null distribution with just one click.
We use these null distributions to adjust effect sizes and assess statisitical
significance. This makes Simuflex the ideal tool to facilitate robust multivariate
analyses. For more background on RSA and CCA, click here:
https://shrturl.app/wPCsb3
https://stats.oarc.ucla.edu/stata/dae/canonical-correlation-analysis/#:~:text=Canonical%20correlation%20analysis%20is%20used,are%20multiple%20intercorrelated%20outcome%20variables."
})
}
# Run the application
shinyApp(ui = ui, server = server)
remove.packages('Matrix')
remove.packages('MASS')
library(MASS)
remove.packages('MASS')
remove.packages('Matrix')
remove.packages('MASS')
remove.packages('ggplot2')
